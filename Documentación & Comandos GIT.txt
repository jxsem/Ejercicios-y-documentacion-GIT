git add <archivo>
Uso: Añade archivos al área de staging para prepararlos para el commit.
Ejemplo: git add README.txt

git commit -m "mensaje" (--amend para realizar algun cambio en el ultimo commit que se haya oolvidado)
Uso: Crea un nuevo commit con los cambios que se encuentran en el área de staging.
Ejemplo: git commit -m "Añadido archivo README.txt"

git status
Uso: Muestra el estado actual del repositorio, incluyendo los archivos modificados, los archivos en staging y los archivos no rastreados.
Ejemplo: git status

git checkout <rama>
Uso: Cambia a una rama diferente en el repositorio.
Ejemplo: git checkout feature-branch

git diff
Uso: Muestra las diferencias entre los cambios realizados en el área de trabajo y el último commit.
Ejemplo: git diff

git log --all
Uso: Muestra todos los commits que se han realizado
Ejemplo: git log (usar q para salir del paginador o git log --no-pager, git log --oneline para que salga una linea del commit)

git reset <git-hash>
Uso: Quita los archivos del área de preparación, pero mantiene los cambios en los archivos.
Ejemplo: git reset --soft <1234abc> (atributo --soft te lo manda a staging)
         git reset --hard <1234abc> (atributo --hard te va a borrar el commit y te lo manda al area de trabajo)

        git reset --soft: Este comando deshace los commits pero mantiene los cambios en el área de preparación (staging area) 
        y en el directorio de trabajo. Es útil si quieres deshacer el commit pero conservar los cambios para que puedas hacer ajustes antes de volver a cometer.
        Uso Típico: Es útil para deshacer commits recientes cuando deseas realizar ajustes antes de volver a hacer commit.

        git reset --hard: Este comando deshace los commits y descarta los cambios tanto del área de preparación como del directorio de trabajo. 
        Los cambios no comprometidos se perderán, así que es más destructivo y se usa cuando quieres eliminar completamente los cambios.
        

git checkout 
Uso: Para revertir el archivo a la versión más reciente del índice (área de staging) -> git checkout a1b2c3d4e5f6g7h8i9j0
Uos: Para moverte de rama -> git checkout nombre-rama


git revert 
Uso: Para deshacer un commit específico sin alterar el historial del repositorio.
El comando git revert es más adecuado para deshacer un commit específico porque crea un nuevo commit que deshace los cambios del commit original. 
Esto mantiene el historial de commits intacto y es seguro para repositorios compartidos.
git revert <commit que quieras revertir>
¡¡¡¡¡ Se crea un nuevo commit que eliminó esos cambios !!!!!

########### NAVEGACION Y GESTION ##################

cd <directorio>
Uso: Cambia el directorio de trabajo actual.
Ejemplo: cd ~/projects (cambia al directorio projects en el directorio principal del usuario)

ls
Uso: Lista los archivos y directorios en el directorio actual.
Ejemplo: ls (lista todos los archivos y carpetas en el directorio actual)

pwd
Uso: Muestra la ruta completa del directorio de trabajo actual.
Ejemplo: pwd (muestra la ruta actual como /home/user/projects)

clear
Uso: Limpia la pantalla de la terminal, eliminando todos los comandos y salida anteriores.
Ejemplo: clear (limpia la pantalla)

mkdir <directorio>
Uso: Crea un nuevo directorio con el nombre especificado.
Ejemplo: mkdir new-folder (crea un nuevo directorio llamado new-folder)

rm <archivo>
Uso: Elimina un archivo.
Ejemplo: rm oldfile.txt (elimina el archivo oldfile.txt)

rmdir <directorio>
Uso: Elimina un directorio vacío.
Ejemplo: rmdir oldfolder (elimina el directorio oldfolder si está vacío)

touch <archivo>
Uso: Crea un nuevo archivo vacío o actualiza la fecha de modificación de un archivo existente.

########################### RAMAS #######################################
Rama principal -> master

git branch 
Uso: Mostrar todas las ramas que tenemos creadas
Ejemplo: git branch 

git branch nombre-de-la-rama
Uso: Hacer una nueva rama
Ejemplo: git branch add-color-background

git switch nombre-de-la-rama
Uso: Moverte a la rama 
Ejemplo: git switch add-color-background

git branch -d nombre-de-la-rama
Uso: Borrar la rama

git branch -m rama-textouno rama-textodos
Uso: Modificar el nombre de la rama sin estar en ella (primero el nombre de la rama y luego el nombre que queremos)

git branch -m cambiartexto
Uso: Modificar el nombre de la rama ESTANDO en la rama

git merge rama-a-fusionar
Uso: Fusionar commit en la rama (posicionarnos en la rama donde queremos fusionar)
git merge --continue (cuando solucionamos conflicto)

.gitignore 
Uso: Crea un archivo donde se guardaría los archivos que se van a ignorar
ejemplo: 

archivo.txt -> archivo especificado
*txt -> todos los archivos que terminan por esa extensión
carpeta/* -> todos los archivos de esa carpeta


******************************CREAR EL REPOSITORIO EN GIT/GITHUB***************************************
readme (puntos a tener en cuenta)
# escribe texto en negrita y sirve como encabezado
## escribe tambien en negrita y sirve para dar enfasis a lo que se está explicando

Issues Loading
Tareas tracking into your repository. Keep projects on track with issue labels and milestones, and reference them in commit messages.
Fork: Crear una copia 

##################################DANGER ZONE###########################################################
Cambiar la visibilidad del proyecto
disable branch protection rules -> NO TOCAR
Transferir la propiedad del repositorio
Archivarlo y no tienes opcion a modificarlo
Eliminarlo

##########################USAR GIT Y GITHUB / COMANDOS########################################
GIT CLONE -> Coger un repositorio de la nube y traerlo a local
git clone https://ulr-del-repo.com

GIT PUSH -> Empujar repositorio desde local a la nube
(si usas el clone, usas git push origin master)

GIT PULL 
Bajar los cambios que estan en el servidor y fusiona directamente a la rama

GIT FETCH
Bajar los cambios que estan en el servidor sin hacer una fusion

git switch --detach origin/main (se crea una rama temporal para visualizar los cambios)

MIGRAR REPOSITORIO LOCAL 
(es como configurar el repositorio remoto)

git remote add origin htpps://url-de-repositorio
git remove -v (todas las cosas que puedes hacer con el repositorio remoto)
git branch -M main
git push -u origin main (para hacer el primer push tienes que aclarar a donde haces el push)


#############DIFERENCIAS ENTRE GIT CLONE Y FORK####################
GIT CLONE -> Se clona el repositorio al pc
FORK-> Desde github, se sube a nuestra cuenta de github (BIFURCACION)

